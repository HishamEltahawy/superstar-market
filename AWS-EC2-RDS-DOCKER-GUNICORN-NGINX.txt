@@@@@@@@@@@@@@@@@@ AWS-EC2-RDS-DOCKER-GUNICORN-NGINX @@@@@@@@@@@@@@@


# 1. إعداد صلاحيات المفتاح الخاص
sudo chmod 400 key-path

# 2. تسجيل الدخول للسيرفر
ssh -i key-path ubuntu@IPV4

# 3. تحديث الحزم
sudo apt update

# 4. تثبيت المتطلبات
sudo apt install apt-transport-https ca-certificates curl software-properties-common

# 5. إضافة مفتاح GPG الرسمي من Docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

# 6. إضافة مستودع Docker
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"

# 7. تحديث الحزم بعد إضافة المستودع
sudo apt update

# 8. تثبيت Docker CE
sudo apt install docker-ce

# 9. التأكد إن الخدمة شغالة
sudo systemctl status docker

# 10. تحميل docker-compose 
sudo curl -SL "$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep browser_download_url | grep $(uname -s)-$(uname -m) | cut -d '"' -f 4)" -o /usr/local/bin/docker-compose

# 11. إعطاء صلاحيات تنفيذ لـ docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# 12. إنشاء مجموعة docker (اختياري لتشغيل بدون sudo)
sudo groupadd docker

sudo apt install python3-pip

touch .env

sudo chmod +x enterypoint.sh

docker-compose up --build -ds

sudo apt-get install nginx

sudo apt install gunicorn


################## Nginx #######################

gunicorn your_project_name.wsgi:application   # default>127.0.0.1:8000
sudo nano /etc/nginx/sites-available/mysite
	server {
  	  listen 80;
 	   server_name yourdomain.com;  # أو IP السيرفر

  	  location = /favicon.ico { access_log off; log_not_found off; }
  	  location /static/ {
  	      root /path/to/your/project;  # المكان اللي فيه ملفات static
 	   }

	    location / {
        	proxy_pass http://127.0.0.1:8001;  # مكان تشغيل gunicorn
	        proxy_set_header Host $host;
        	proxy_set_header X-Real-IP $remote_addr;
    	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    	    proxy_set_header X-Forwarded-Proto $scheme;
  	  }
	}

sudo ln -s /etc/nginx/sites-available/mysite /etc/nginx/sites-enabled 	# ثم اعمل لينك له في sites-enabled:
sudo rm /etc/nginx/sites-enabled/default 	 #وتأكد إنك تحذف default config أو تعطّله:
sudo nginx -t		#ثم اختبر إعداد nginx:
sudo systemctl restart nginx		#وأعد تشغيل nginx:

############### Media-Static #################
python manage.py collectstatic

location /media/ {		ولو عندك ملفات media (صور مثلاً يرفعها المستخدم)، عدل إعدادات nginx تضيف:
    root /path/to/your/project;
}
############خدمة Systemd لـ Gunicorn (تشغيل دائم)##################
sudo nano /etc/systemd/system/gunicorn.service

	[Unit]
	Description=gunicorn daemon
	After=network.target

	[Service]
	User=youruser
	Group=www-data
	WorkingDirectory=/path/to/your/project
	ExecStart=/path/to/your/venv/bin/gunicorn --workers 3 --bind 127.0.0.1:8001 your_project_name.wsgi:application

	[Install]
	WantedBy=multi-user.target

sudo systemctl start gunicorn
sudo systemctl enable gunicorn

######################### SSH-HTTPS ###########################

#1 docker-compose.yml file>>>>>
  nginx:
    container_name: nginx
    image: nginx:stable-alpine
    ports:
      - "8080:80" #http
      - "443:443" # https
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./static:/app/static
      - ./media:/app/media
      - ./certbot/www:/var/www/certbot #https
      - ./certbot/conf:/etc/letsencrypt #https
    depends_on:
      - django
    networks:
      - app-network

  certbot:
  image: certbot/certbot
  volumes:
    - ./certbot/www:/var/www/certbot
    - ./certbot/conf:/etc/letsencrypt 

#2 /etc/nginx/sites-available/mysite file >>>>>>

server {
    listen 80 default_server;
    server_name 13.51.162.174 ec2-13-51-162-174.eu-north-1.compute.amazonaws.com;
    root /app;

    location /.well-known/acme-challenge/ {
    root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }

    location /static/ {
        alias /app/static/;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    location /media/ {
        alias /app/media/;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    location / {
        proxy_pass http://django:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_buffering off;
    }

    client_max_body_size 20M;

    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
}

server {
    listen 443 ssl;
    server_name 13.51.162.174 ec2-13-51-162-174.eu-north-1.compute.amazonaws.com;

    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    location /static/ {
        alias /app/static/;
    }

    location / {
        proxy_pass http://django:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

#################### RDS ###########################
SECURITY GROUP INPAUND RULE >>>
PostgreSQL - TCP - 5432 - CUSTUM - private EC2 ip
